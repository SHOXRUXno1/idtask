import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import uuid  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–¥–∞—á

# Bot token
TOKEN = "7695838711:AAEne9ai-xk2m_6S-2lNoEcXg7ai1S6z5Ds"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_ID = 114253636

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
employees = {}
tasks = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

# –°—Ç–∞—Ç—É—Å—ã
class AddEmployee(StatesGroup):
    waiting_for_employee_id = State()
    waiting_for_employee_position = State()

class AssignTask(StatesGroup):
    waiting_for_task = State()
    chosen_employee_id = State()

class RemoveEmployee(StatesGroup):
    waiting_for_employee_to_remove = State()

# –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="1 - Xodim qo'shish ü§ù")],
        [KeyboardButton(text="2 - Xodimga xabar yozish üì®")],
        [KeyboardButton(text="3 - Xodimni o'chirish ‚ùå")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="2 - Xodimga xabar yozish üì®")],
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
back_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="Orqaga ‚Ü©Ô∏è")]
    ],
    resize_keyboard=True
)

# –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id == ADMIN_ID:  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.answer("Ishni tanlang: ü§î", reply_markup=admin_keyboard)
    else:
        await message.answer(f"Salom, {message.from_user.full_name}!üëã\nSizning ID: `{message.from_user.id}`",
                             parse_mode="Markdown", reply_markup=user_keyboard)

# –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@dp.message(lambda message: message.text == "1 - Xodim qo'shish ü§ù")
async def add_employee_start(message: types.Message, state: FSMContext):
    await message.answer("Iltimos, xodimning Telegram ID'sini kiriting: üÜî")
    await state.set_state(AddEmployee.waiting_for_employee_id)

@dp.message(AddEmployee.waiting_for_employee_id)
async def employee_id_received(message: types.Message, state: FSMContext):
    await state.update_data(employee_id=message.text)
    await message.answer("Iltimos, xodimning lavozimini kiriting: üè¢")
    await state.set_state(AddEmployee.waiting_for_employee_position)

@dp.message(AddEmployee.waiting_for_employee_position)
async def employee_position_received(message: types.Message, state: FSMContext):
    data = await state.get_data()
    employee_id = data['employee_id']
    employee_position = message.text
    employees[employee_id] = employee_position
    await message.answer(f"Xodim ID {employee_id} va lavozimi '{employee_position}' qo'shildi. üéâ")
    await message.answer("Orqaga qaytish uchun tugmani bosing:", reply_markup=back_keyboard)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Orqaga"
@dp.message(lambda message: message.text == "Orqaga ‚Ü©Ô∏è")
async def go_back(message: types.Message):
    if message.from_user.id == ADMIN_ID:  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.answer("Ishni tanlang: ü§î", reply_markup=admin_keyboard)
    else:
        await message.answer("Ishni tanlang: ü§î", reply_markup=user_keyboard)

# –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@dp.message(lambda message: message.text == "3 - Xodimni o'chirish ‚ùå")
async def remove_employee_start(message: types.Message):
    if not employees:
        await message.answer("Xodimlar hali mavjud emas. üòî")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    inline_keyboard = [
        [InlineKeyboardButton(text=f"{employee_id} - {position}", callback_data=f"remove_{employee_id}")]
        for employee_id, position in employees.items()
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    await message.answer("O'chirish uchun xodimni tanlang: ‚ùå", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data and c.data.startswith("remove_"))
async def employee_to_remove(callback_query: types.CallbackQuery):
    employee_id = callback_query.data.split("_")[1]

    if employee_id in employees:
        employee_position = employees[employee_id]
        del employees[employee_id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞

        await bot.send_message(callback_query.from_user.id,
                               f"Xodim ID {employee_id} va lavozimi '{employee_position}' o'chirildi. ‚úÖ")
        await bot.send_message(callback_query.from_user.id, "Orqaga qaytish uchun tugmani bosing:",
                               reply_markup=back_keyboard)
    else:
        await bot.send_message(callback_query.from_user.id, "Xodim topilmadi. üòû")

    await bot.answer_callback_query(callback_query.id)

# –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
@dp.message(lambda message: message.text == "2 - Xodimga xabar yozish üì®")
async def choose_employee_for_task(message: types.Message):
    if not employees:
        await message.answer("Xodimlar hali mavjud emas. üòî")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    inline_keyboard = [
        [InlineKeyboardButton(text=f"{position}", callback_data=f"choose_{employee_id}")]
        for employee_id, position in employees.items()
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    await message.answer("Xodimni tanlang: üßë‚Äçüíº", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data and c.data.startswith("choose_"))
async def employee_chosen(callback_query: types.CallbackQuery, state: FSMContext):
    employee_id = callback_query.data.split("_")[1]
    employee_position = employees.get(employee_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    if employee_position is None:
        await bot.send_message(callback_query.from_user.id, "Xodim topilmadi. üòû")
        await bot.answer_callback_query(callback_query.id)
        return

    await state.update_data(chosen_employee_id=employee_id)
    await bot.send_message(
        callback_query.from_user.id,
        f"Siz ( {employee_position} ) - üë®‚Äçüíº bo'lgan xodimni tanladingiz. Vazifani yozing: üìù"
    )
    await state.set_state(AssignTask.waiting_for_task)
    await bot.answer_callback_query(callback_query.id)

@dp.message(AssignTask.waiting_for_task)
async def task_assigned(message: types.Message, state: FSMContext):
    data = await state.get_data()
    employee_id = data['chosen_employee_id']
    task_text = message.text

    if employee_id not in employees:
        await message.answer("Xodim topilmadi, iltimos yana urinib ko'ring. üôÅ")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏
    task_id = str(uuid.uuid4())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
    tasks[task_id] = {"employee_id": employee_id, "task": task_text, "sender_id": message.from_user.id}

    # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
    logging.info(f"Task added: {task_id} for employee {employee_id}")

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞–ª" –∏ "–ù–µ —Å–¥–µ–ª–∞–ª"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–¥–µ–ª–∞–ª ‚úÖ", callback_data=f"done_{task_id}"),
            InlineKeyboardButton(text="–ù–µ —Å–¥–µ–ª–∞–ª ‚ùå", callback_data=f"not_done_{task_id}")
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender_name = message.from_user.full_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    await bot.send_message(
        employee_id,
        f'Sizga vazifa yuklandi: {task_text} üìã\n\nYuborgan: {sender_name} (ID: {message.from_user.id})',
        reply_markup=keyboard
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    await message.answer(f"Vazifa ({employees[employee_id]}) üë®‚Äçüíº bo'lgan xodimga yuborildi. üì¨",
                         reply_markup=back_keyboard)

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.callback_query(lambda c: c.data and (c.data.startswith("done_") or c.data.startswith("not_done_")))
async def task_done_or_not(callback_query: types.CallbackQuery):
    logging.info(f"Received callback data: {callback_query.data}")

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —á–∞—Å—Ç–∏
    action, task_id = callback_query.data.rsplit("_", 1)

    task_info = tasks.get(task_id)

    if task_info:
        employee_id = task_info['employee_id']
        task_text = task_info['task']
        sender_id = task_info['sender_id']

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∞–¥–º–∏–Ω –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        sender = await bot.get_chat(sender_id)
        sender_name = sender.full_name if sender else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"

        if action == "done":
            await bot.send_message(sender_id,
                                   f"Xodim {employees[employee_id]} - üë®‚Äçüíº vazifani bajardi:\nVazifa:  {task_text} ‚úÖ")
            await bot.send_message(employee_id, "Raxmat - üëç, Siz bajardingiz - ‚úÖ")
        else:
            await bot.send_message(sender_id,
                                   f"Xodim {employees[employee_id]} - üë®‚Äçüíº vazifani bajarmadi: \nVazifa: {task_text} ‚ùå")
            await bot.send_message(employee_id, "Raxmat - üëç, Siz bajarmadingiz - ‚ùå")  # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        del tasks[task_id]

    await bot.answer_callback_query(callback_query.id)

async def set_commands():
    commands = [
        types.BotCommand(command="start", description="Botni ishga tushirish"),
    ]
    await bot.set_my_commands(commands)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(dp):
    await set_commands()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

async def main():
    await on_startup(dp)  # –í—ã–∑–æ–≤ –≤–∞—à–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await dp.start_polling(bot)  # –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
